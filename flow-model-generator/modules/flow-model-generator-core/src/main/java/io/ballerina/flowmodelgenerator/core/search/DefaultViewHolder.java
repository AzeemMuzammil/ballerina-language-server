/*
 *  Copyright (c) 2025, WSO2 LLC. (http://www.wso2.com)
 *
 *  WSO2 LLC. licenses this file to you under the Apache License,
 *  Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 */

package io.ballerina.flowmodelgenerator.core.search;

import io.ballerina.modelgenerator.commons.SearchResult;

import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.concurrent.ConcurrentHashMap;

/**
 * A singleton class that holds default view items for different search commands.
 *
 * <p>
 * This class is thread-safe and follows the lazy loading pattern. Default views are generated by calling the
 * fetchPopularItems method of the SearchCommand when first requested and then cached for subsequent calls.
 * </p>
 *
 * @since 2.0.0
 */
class DefaultViewHolder {

    private static volatile DefaultViewHolder instance;
    private final Map<Class<? extends SearchCommand>, List<SearchResult>> defaultViewsCache;

    private DefaultViewHolder() {
        this.defaultViewsCache = new ConcurrentHashMap<>();
    }

    /**
     * Gets the singleton instance of DefaultViewHolder using double-checked locking.
     *
     * @return The singleton instance
     */
    public static DefaultViewHolder getInstance() {
        if (instance == null) {
            synchronized (DefaultViewHolder.class) {
                if (instance == null) {
                    instance = new DefaultViewHolder();
                }
            }
        }
        return instance;
    }

    /**
     * Gets the default view items for a specific search command. If this is the first request for this command type,
     * its defaultView() method is called and the result is cached.
     *
     * @param command The search command instance
     * @return The default view items for the command
     */
    public List<SearchResult> get(SearchCommand command) {
        Objects.requireNonNull(command, "SearchCommand cannot be null");

        Class<? extends SearchCommand> commandClass = command.getClass();

        // Return cached view if already generated
        if (defaultViewsCache.containsKey(commandClass)) {
            return defaultViewsCache.get(commandClass);
        }

        // Generate and cache the view using the command's defaultView() method
        synchronized (defaultViewsCache) {
            // Check again in case another thread has populated the cache while we were waiting
            if (!defaultViewsCache.containsKey(commandClass)) {
                List<SearchResult> items = command.fetchPopularItems();
                defaultViewsCache.put(commandClass, Collections.unmodifiableList(items));
            }
            return defaultViewsCache.get(commandClass);
        }
    }
}
