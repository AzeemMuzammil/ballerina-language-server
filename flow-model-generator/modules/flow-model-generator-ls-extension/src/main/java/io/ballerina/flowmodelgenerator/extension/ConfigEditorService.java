/*
 *  Copyright (c) 2024, WSO2 LLC. (http://www.wso2.com)
 *
 *  WSO2 LLC. licenses this file to you under the Apache License,
 *  Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 */

package io.ballerina.flowmodelgenerator.extension;

import io.ballerina.flowmodelgenerator.core.ConfigVariablesManager;
import io.ballerina.flowmodelgenerator.extension.request.ConfigVariablesGetRequest;
import io.ballerina.flowmodelgenerator.extension.response.ConfigVariablesResponse;
import io.ballerina.projects.Document;
import org.ballerinalang.annotation.JavaSPIService;
import org.ballerinalang.langserver.commons.service.spi.ExtendedLanguageServerService;
import org.ballerinalang.langserver.commons.workspace.WorkspaceManager;
import org.eclipse.lsp4j.jsonrpc.services.JsonRequest;
import org.eclipse.lsp4j.jsonrpc.services.JsonSegment;
import org.eclipse.lsp4j.services.LanguageServer;

import java.nio.file.Path;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;

@JavaSPIService("org.ballerinalang.langserver.commons.service.spi.ExtendedLanguageServerService")
@JsonSegment("configEditor")
public class ConfigEditorService implements ExtendedLanguageServerService {

    private WorkspaceManager workspaceManager;
    private LanguageServer langServer;

    @Override
    public void init(LanguageServer langServer, WorkspaceManager workspaceManager) {
        this.workspaceManager = workspaceManager;
        this.langServer = langServer;
    }

    @Override
    public Class<?> getRemoteInterface() {
        return null;
    }

    @JsonRequest
    public CompletableFuture<ConfigVariablesResponse> getConfigVariables(ConfigVariablesGetRequest request) {
        return CompletableFuture.supplyAsync(() -> {
            ConfigVariablesResponse response = new ConfigVariablesResponse();
            try {
                Path configFile = Path.of(request.configFilePath());
                this.workspaceManager.loadProject(configFile);
                Optional<Document> document = this.workspaceManager.document(configFile);
                if (document.isEmpty()) {
                    return response;
                }

                ConfigVariablesManager configVariablesManager = new ConfigVariablesManager();
                response.setConfigVariables(configVariablesManager.get(document.get()));
            } catch (Throwable e) {
                response.setError(e);
            }
            return response;
        });
    }

//    @JsonRequest
//    public CompletableFuture<ConfigurableVariablesGeneratorResponse> generateConfigurableVariables(
//            ConfigurableVariablesGeneratorRequest request) {
//
//        return CompletableFuture.supplyAsync(() -> {
//            ConfigurableVariablesGeneratorResponse response = new ConfigurableVariablesGeneratorResponse();
//            try {
//                ConfigVariablesManager configVariablesManager =
//                        new ConfigVariablesManager(this.workspaceManager, request.filePath());
////                JsonElement element = configVariablesManager.textEditsToAddConfigurableVariables(request.variable(), request.type(), request.value());
////                Path openApiContractPath = Path.of(request.openApiContractPath());
////                Path projectPath = Path.of(request.projectPath());
////                OpenApiServiceGenerator openApiServiceGenerator = new OpenApiServiceGenerator(openApiContractPath,
////                        projectPath, request.port(), workspaceManager);
////                response.setService(openApiServiceGenerator.generateService());
//            } catch (Throwable e) {
//                //TODO: Handle errors generated by the flow model generator service.
//                response.setError(e);
//            }
//            return response;
//        });
//    }
}
