/*
 *  Copyright (c) 2024, WSO2 LLC. (http://www.wso2.com)
 *
 *  WSO2 LLC. licenses this file to you under the Apache License,
 *  Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 */

package io.ballerina.flowmodelgenerator.extension;

import io.ballerina.compiler.api.SemanticModel;
import io.ballerina.flowmodelgenerator.core.ModelGenerator;
import io.ballerina.flowmodelgenerator.core.SourceGenerator;
import io.ballerina.projects.Document;
import org.ballerinalang.annotation.JavaSPIService;
import org.ballerinalang.langserver.commons.service.spi.ExtendedLanguageServerService;
import org.ballerinalang.langserver.commons.workspace.WorkspaceManager;
import org.eclipse.lsp4j.jsonrpc.services.JsonRequest;
import org.eclipse.lsp4j.jsonrpc.services.JsonSegment;
import org.eclipse.lsp4j.services.LanguageServer;

import java.nio.file.Path;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;

/**
 * Represents the extended language server service for the flow model generator service.
 *
 * @since 2201.9.0
 */
@JavaSPIService("org.ballerinalang.langserver.commons.service.spi.ExtendedLanguageServerService")
@JsonSegment("flowDesignService")
public class FlowModelGeneratorService implements ExtendedLanguageServerService {

    private WorkspaceManager workspaceManager;

    @Override
    public void init(LanguageServer langServer, WorkspaceManager workspaceManager) {
        this.workspaceManager = workspaceManager;
    }

    @Override
    public Class<?> getRemoteInterface() {
        return null;
    }

    @JsonRequest
    public CompletableFuture<FlowModelGeneratorServiceResponse> getFlowDesignModel(
            FlowModelGeneratorServiceRequest request) {

        return CompletableFuture.supplyAsync(() -> {
            FlowModelGeneratorServiceResponse response = new FlowModelGeneratorServiceResponse();
            try {
                Path filePath = Path.of(request.getFilePath());

                // Obtain the semantic model and the document
                this.workspaceManager.loadProject(filePath);
                Optional<SemanticModel> semanticModel = this.workspaceManager.semanticModel(filePath);
                Optional<Document> document = this.workspaceManager.document(filePath);
                if (semanticModel.isEmpty() || document.isEmpty()) {
                    return response;
                }

                // Generate the flow design model
                ModelGenerator modelGenerator = new ModelGenerator(semanticModel.get(), document.get(),
                        request.getLineRange(), filePath);
                response.setFlowDesignModel(modelGenerator.getFlowModel());
            } catch (Throwable e) {
                throw new RuntimeException(e);
                //TODO: Handle errors generated by the flow model generator service.
            }
            return response;
        });
    }

    @JsonRequest
    public CompletableFuture<FlowModelSourceGeneratorServiceResponse> getSourceCode(
            FlowModelSourceGeneratorServiceRequest request) {

        return CompletableFuture.supplyAsync(() -> {
            FlowModelSourceGeneratorServiceResponse response = new FlowModelSourceGeneratorServiceResponse();
            try {
                SourceGenerator sourceGenerator = new SourceGenerator();
                response.setTextEdit(sourceGenerator.toSourceCode(request.getDiagramNode()));
            } catch (Throwable e) {
                throw new RuntimeException(e);
                //TODO: Handle errors generated by the flow model generator service.
            }
            return response;
        });
    }
}
