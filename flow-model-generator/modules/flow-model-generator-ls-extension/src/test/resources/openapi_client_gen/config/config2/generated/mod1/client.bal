// AUTO-GENERATED FILE. DO NOT MODIFY.
// This file is auto-generated by the Ballerina OpenAPI tool.


import ballerina/http;

# This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about
# Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!
# You can now help us improve the API whether it's by making changes to the definition itself or to the code.
# That way, with time, we can improve the API in general, and expose some of the new features in OAS3.
# 
# _If you're looking for the Swagger 2.0/OAS 2.0 version of Petstore, then click [here](https://editor.swagger.io/?url=https://petstore.swagger.io/v2/swagger.yaml). Alternatively, you can load via the `Edit > Load Petstore OAS 2.0` menu option!_
# 
# Some useful links:
# - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)
# - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
public isolated client class Client {
    final http:Client clientEp;
    final readonly & ApiKeysConfig? apiKeyConfig;
    # Gets invoked to initialize the `connector`.
    #
    # + config - The configurations to be used when initializing the `connector` 
    # + serviceUrl - URL of the target service 
    # + return - An error if connector initialization failed 
    public isolated function init(ConnectionConfig config, string serviceUrl = "https://petstore3.swagger.io/api/v3") returns error? {
        http:ClientConfiguration httpClientConfig = {httpVersion: config.httpVersion, timeout: config.timeout, forwarded: config.forwarded, poolConfig: config.poolConfig, compression: config.compression, circuitBreaker: config.circuitBreaker, retryConfig: config.retryConfig, validation: config.validation};
        do {
            if config.http1Settings is ClientHttp1Settings {
                ClientHttp1Settings settings = check config.http1Settings.ensureType(ClientHttp1Settings);
                httpClientConfig.http1Settings = {...settings};
            }
            if config.http2Settings is http:ClientHttp2Settings {
                httpClientConfig.http2Settings = check config.http2Settings.ensureType(http:ClientHttp2Settings);
            }
            if config.cache is http:CacheConfig {
                httpClientConfig.cache = check config.cache.ensureType(http:CacheConfig);
            }
            if config.responseLimits is http:ResponseLimitConfigs {
                httpClientConfig.responseLimits = check config.responseLimits.ensureType(http:ResponseLimitConfigs);
            }
            if config.secureSocket is http:ClientSecureSocket {
                httpClientConfig.secureSocket = check config.secureSocket.ensureType(http:ClientSecureSocket);
            }
            if config.proxy is http:ProxyConfig {
                httpClientConfig.proxy = check config.proxy.ensureType(http:ProxyConfig);
            }
        }
        if config.auth is ApiKeysConfig {
            self.apiKeyConfig = (<ApiKeysConfig>config.auth).cloneReadOnly();
        } else {
            httpClientConfig.auth = <http:BearerTokenConfig>config.auth;
            self.apiKeyConfig = ();
        }
        http:Client httpEp = check new (serviceUrl, httpClientConfig);
        self.clientEp = httpEp;
        return;
    }

    # Deletes a pet
    #
    # + petId - Pet id to delete
    # + headers - Headers to be sent with the request 
    # + return - Invalid pet value 
    resource isolated function delete pet/[int petId](DeletePetHeaders headers = {}) returns http:Response|error {
        string resourcePath = string `/pet/${getEncodedUri(petId)}`;
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    resource isolated function delete store/'order/[int orderId](map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/store/order/${getEncodedUri(orderId)}`;
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Delete user
    #
    # + username - The name that needs to be deleted
    # + headers - Headers to be sent with the request 
    # + return - Invalid username supplied 
    resource isolated function delete user/[string username](map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/user/${getEncodedUri(username)}`;
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Find pet by ID
    #
    # + petId - ID of pet to return
    # + headers - Headers to be sent with the request 
    # + return - successful operation 
    resource isolated function get pet/[int petId](map<string|string[]> headers = {}) returns Pet|error {
        string resourcePath = string `/pet/${getEncodedUri(petId)}`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["api_key"] = self.apiKeyConfig?.api_key;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Finds Pets by status
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - successful operation 
    resource isolated function get pet/findByStatus(map<string|string[]> headers = {}, *FindPetsByStatusQueries queries) returns Pet[]|error {
        string resourcePath = string `/pet/findByStatus`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Finds Pets by tags
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - successful operation 
    resource isolated function get pet/findByTags(map<string|string[]> headers = {}, *FindPetsByTagsQueries queries) returns Pet[]|error {
        string resourcePath = string `/pet/findByTags`;
        map<Encoding> queryParamEncoding = {"tags": {style: FORM, explode: true}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get store/'order/[int orderId](map<string|string[]> headers = {}) returns Order|error {
        string resourcePath = string `/store/order/${getEncodedUri(orderId)}`;
        return self.clientEp->get(resourcePath, headers);
    }

    # Returns pet inventories by status
    #
    # + headers - Headers to be sent with the request 
    # + return - successful operation 
    resource isolated function get store/inventory(map<string|string[]> headers = {}) returns record {|int:Signed32...;|}|error {
        string resourcePath = string `/store/inventory`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["api_key"] = self.apiKeyConfig?.api_key;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Get user by user name
    #
    # + username - The name that needs to be fetched. Use user1 for testing. 
    # + headers - Headers to be sent with the request 
    # + return - successful operation 
    resource isolated function get user/[string username](map<string|string[]> headers = {}) returns User|error {
        string resourcePath = string `/user/${getEncodedUri(username)}`;
        return self.clientEp->get(resourcePath, headers);
    }

    # Logs user into the system
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - successful operation 
    resource isolated function get user/login(map<string|string[]> headers = {}, *LoginUserQueries queries) returns xml|error {
        string resourcePath = string `/user/login`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Logs out current logged in user session
    #
    # + headers - Headers to be sent with the request 
    # + return - successful operation 
    resource isolated function get user/logout(map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/user/logout`;
        return self.clientEp->get(resourcePath, headers);
    }

    # Add a new pet to the store
    #
    # + headers - Headers to be sent with the request 
    # + payload - Create a new pet in the store 
    # + return - Successful operation 
    resource isolated function post pet(Pet payload, map<string|string[]> headers = {}) returns Pet|error {
        string resourcePath = string `/pet`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Updates a pet in the store with form data
    #
    # + petId - ID of pet that needs to be updated
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Invalid input 
    resource isolated function post pet/[int petId](map<string|string[]> headers = {}, *UpdatePetWithFormQueries queries) returns http:Response|error {
        string resourcePath = string `/pet/${getEncodedUri(petId)}`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # uploads an image
    #
    # + petId - ID of pet to update
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - successful operation 
    resource isolated function post pet/[int petId]/uploadImage(byte[] payload, map<string|string[]> headers = {}, *UploadFileQueries queries) returns ApiResponse|error {
        string resourcePath = string `/pet/${getEncodedUri(petId)}/uploadImage`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        http:Request request = new;
        request.setPayload(payload, "application/octet-stream");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post store/'order(Order payload, map<string|string[]> headers = {}) returns Order|error {
        string resourcePath = string `/store/order`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Create user
    #
    # + headers - Headers to be sent with the request 
    # + payload - Created user object 
    # + return - successful operation 
    resource isolated function post user(User payload, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/user`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Creates list of users with given input array
    #
    # + headers - Headers to be sent with the request 
    # + return - Successful operation 
    resource isolated function post user/createWithList(User[] payload, map<string|string[]> headers = {}) returns User|error {
        string resourcePath = string `/user/createWithList`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Update an existing pet
    #
    # + headers - Headers to be sent with the request 
    # + payload - Update an existent pet in the store 
    # + return - Successful operation 
    resource isolated function put pet(Pet payload, map<string|string[]> headers = {}) returns Pet|error {
        string resourcePath = string `/pet`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Update user
    #
    # + username - name that need to be deleted
    # + headers - Headers to be sent with the request 
    # + payload - Update an existent user in the store 
    # + return - successful operation 
    resource isolated function put user/[string username](User payload, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/user/${getEncodedUri(username)}`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }
}
