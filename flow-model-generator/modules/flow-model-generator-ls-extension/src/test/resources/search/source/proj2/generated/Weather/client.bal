// AUTO-GENERATED FILE. DO NOT MODIFY.
// This file is auto-generated by the Ballerina OpenAPI tool.


import ballerina/http;

# # Introduction
# WeatherAPI.com provides access to weather and geo data via a JSON/XML restful API. It allows developers to create desktop, web and mobile applications using this data very easy. We provide following data through our API:    
# - Real-time weather
# - 14 day weather forecast
# - Historical Weather
# - Marine Weather and Tide Data
# - Future Weather (Upto 365 days ahead)
# - Daily and hourly intervals
# - 15 min interval (Enterprise only)
# - Astronomy
# - Time zone
# - Location data
# - Sports
# - Search or Autocomplete API
# - Weather Alerts
# - Air Quality Data
# - Bulk Request
# 
# # Getting Started  
# 
# You need to [signup](https://www.weatherapi.com/signup.aspx) and then you can find your API key under [your account](https://www.weatherapi.com/login.aspx), and start using API right away!
# 
# Try our weather API by using interactive [API Explorer](https://www.weatherapi.com/api-explorer.aspx).
# 
# We also have SDK for popular framework/languages available on [Github](https://github.com/weatherapicom/) for quick integrations.
# 
# If you find any features missing or have any suggestions, please [contact us](https://www.weatherapi.com/contact.aspx).  
# 
# # Authentication  
# 
# API access to the data is protected by an API key. If at anytime, you find the API key has become vulnerable, please regenerate the key using Regenerate button next to the API key.  
# 
# Authentication to the WeatherAPI.com API is provided by passing your API key as request parameter through an API .    
# 
# ##  key parameter 
# key=YOUR API KEY 
public isolated client class Client {
    final http:Client clientEp;
    final readonly & ApiKeysConfig apiKeyConfig;
    # Gets invoked to initialize the `connector`.
    #
    # + apiKeyConfig - API keys for authorization 
    # + config - The configurations to be used when initializing the `connector` 
    # + serviceUrl - URL of the target service 
    # + return - An error if connector initialization failed 
    public isolated function init(ApiKeysConfig apiKeyConfig, ConnectionConfig config =  {}, string serviceUrl = "https://api.weatherapi.com/v1") returns error? {
        http:ClientConfiguration httpClientConfig = {httpVersion: config.httpVersion, http1Settings: config.http1Settings, http2Settings: config.http2Settings, timeout: config.timeout, forwarded: config.forwarded, followRedirects: config.followRedirects, poolConfig: config.poolConfig, cache: config.cache, compression: config.compression, circuitBreaker: config.circuitBreaker, retryConfig: config.retryConfig, cookieConfig: config.cookieConfig, responseLimits: config.responseLimits, secureSocket: config.secureSocket, proxy: config.proxy, socketConfig: config.socketConfig, validation: config.validation, laxDataBinding: config.laxDataBinding};
        self.clientEp = check new (serviceUrl, httpClientConfig);
        self.apiKeyConfig = apiKeyConfig.cloneReadOnly();
    }

    # Realtime API
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Ok 
    resource isolated function get current\.json(map<string|string[]> headers = {}, *RealtimeWeatherQueries queries) returns InlineResponse200|error {
        string resourcePath = string `/current.json`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Forecast API
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Ok 
    resource isolated function get forecast\.json(map<string|string[]> headers = {}, *ForecastWeatherQueries queries) returns InlineResponse2001|error {
        string resourcePath = string `/forecast.json`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Future API
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Ok 
    resource isolated function get future\.json(map<string|string[]> headers = {}, *FutureWeatherQueries queries) returns InlineResponse2002|error {
        string resourcePath = string `/future.json`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # History API
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Ok 
    resource isolated function get history\.json(map<string|string[]> headers = {}, *HistoryWeatherQueries queries) returns InlineResponse2002|error {
        string resourcePath = string `/history.json`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Marine Weather API
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Ok 
    resource isolated function get marine\.json(map<string|string[]> headers = {}, *MarineWeatherQueries queries) returns InlineResponse2003|error {
        string resourcePath = string `/marine.json`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Search/Autocomplete API
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Ok 
    resource isolated function get search\.json(map<string|string[]> headers = {}, *SearchAutocompleteWeatherQueries queries) returns ArrayOfSearch|error {
        string resourcePath = string `/search.json`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # IP Lookup API
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Ok 
    resource isolated function get ip\.json(map<string|string[]> headers = {}, *IpLookupQueries queries) returns Ip|error {
        string resourcePath = string `/ip.json`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Time Zone API
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Ok 
    resource isolated function get timezone\.json(map<string|string[]> headers = {}, *TimeZoneQueries queries) returns Location|error {
        string resourcePath = string `/timezone.json`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Astronomy API
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Ok 
    resource isolated function get astronomy\.json(map<string|string[]> headers = {}, *AstronomyQueries queries) returns Location|InlineResponse2004|error {
        string resourcePath = string `/astronomy.json`;
        map<anydata> queryParam = {...queries};
        queryParam["key"] = self.apiKeyConfig.'key;
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }
}
