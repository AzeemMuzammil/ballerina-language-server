// AUTO-GENERATED FILE. DO NOT MODIFY.
// This file is auto-generated by the Ballerina OpenAPI tool.


import ballerina/data.jsondata;
import ballerina/http;

public type ForecastCondition record {
    int:Signed32 code?;
    string icon?;
    string text?;
};

public type ArrayOfSearch Search[];

# Represents the Queries record for the operation: forecast-weather
public type ForecastWeatherQueries record {
    # Date should be between today and next 14 day in yyyy-MM-dd format. e.g. '2015-01-01'
    string dt?;
    # Enable/Disable alerts in forecast API output. Example, alerts=yes or alerts=no
    string alerts?;
    # Pass US Zipcode, UK Postcode, Canada Postalcode, IP address, Latitude/Longitude (decimal degree) or city name. Visit [request parameter section](https://www.weatherapi.com/docs/#intro-request) to learn more
    string q;
    # Must be in 24 hour. For example 5 pm should be hour=17, 6 am as hour=6
    int hour?;
    # Enable/Disable Air Quality data in forecast API output. Example, aqi=yes or aqi=no
    string aqi?;
    # Number of days of weather forecast. Value ranges from 1 to 14
    1|2|3|4|5|6|7|8|9|10|11|12|13|14 days;
    # Returns 'condition:text' field in API in the desired language.<br /> Visit [request parameter section](https://www.weatherapi.com/docs/#intro-request) to check 'lang-code'
    string lang?;
    # Get 15 min interval or 24 hour average data for Forecast and History API. Available for Enterprise clients only. E.g:- tp=15
    int tp?;
    # Please either pass 'dt' or 'unixdt' and not both in same request. unixdt should be between today and next 14 day in Unix format. e.g. 1490227200
    int unixdt?;
};

public type MarineHour record {
    @jsondata:Name {value: "feelslike_c"}
    decimal feelslikeC?;
    @jsondata:Name {value: "feelslike_f"}
    decimal feelslikeF?;
    @jsondata:Name {value: "wind_degree"}
    decimal windDegree?;
    @jsondata:Name {value: "windchill_f"}
    decimal windchillF?;
    @jsondata:Name {value: "windchill_c"}
    decimal windchillC?;
    @jsondata:Name {value: "sig_ht_mt"}
    decimal sigHtMt?;
    @jsondata:Name {value: "temp_c"}
    decimal tempC?;
    @jsondata:Name {value: "temp_f"}
    decimal tempF?;
    decimal cloud?;
    @jsondata:Name {value: "wind_kph"}
    decimal windKph?;
    @jsondata:Name {value: "wind_mph"}
    decimal windMph?;
    decimal humidity?;
    @jsondata:Name {value: "dewpoint_f"}
    decimal dewpointF?;
    @jsondata:Name {value: "swell_dir_16_point"}
    decimal swellDir16Point?;
    @jsondata:Name {value: "will_it_rain"}
    int:Signed32 willItRain?;
    int:Signed32 uv?;
    @jsondata:Name {value: "heatindex_f"}
    decimal heatindexF?;
    @jsondata:Name {value: "dewpoint_c"}
    decimal dewpointC?;
    @jsondata:Name {value: "swell_dir"}
    decimal swellDir?;
    @jsondata:Name {value: "swell_ht_ft"}
    decimal swellHtFt?;
    @jsondata:Name {value: "is_day"}
    int:Signed32 isDay?;
    @jsondata:Name {value: "precip_in"}
    decimal precipIn?;
    @jsondata:Name {value: "heatindex_c"}
    decimal heatindexC?;
    @jsondata:Name {value: "wind_dir"}
    string windDir?;
    @jsondata:Name {value: "gust_mph"}
    decimal gustMph?;
    @jsondata:Name {value: "pressure_in"}
    decimal pressureIn?;
    @jsondata:Name {value: "chance_of_rain"}
    decimal chanceOfRain?;
    @jsondata:Name {value: "gust_kph"}
    decimal gustKph?;
    @jsondata:Name {value: "precip_mm"}
    decimal precipMm?;
    ForecastCondition condition?;
    @jsondata:Name {value: "swell_period_secs"}
    decimal swellPeriodSecs?;
    @jsondata:Name {value: "will_it_snow"}
    int:Signed32 willItSnow?;
    @jsondata:Name {value: "swell_ht_mt"}
    decimal swellHtMt?;
    @jsondata:Name {value: "vis_km"}
    decimal visKm?;
    @jsondata:Name {value: "time_epoch"}
    int:Signed32 timeEpoch?;
    string time?;
    @jsondata:Name {value: "chance_of_snow"}
    decimal chanceOfSnow?;
    @jsondata:Name {value: "pressure_mb"}
    decimal pressureMb?;
    @jsondata:Name {value: "vis_miles"}
    decimal visMiles?;
};

public type Ip record {
    @jsondata:Name {value: "continent_name"}
    string continentName?;
    string localtime?;
    @jsondata:Name {value: "localtime_epoch"}
    int:Signed32 localtimeEpoch?;
    string city?;
    string ip?;
    @jsondata:Name {value: "continent_code"}
    string continentCode?;
    decimal lon?;
    string 'type?;
    @jsondata:Name {value: "geoname_id"}
    int:Signed32 geonameId?;
    @jsondata:Name {value: "tz_id"}
    string tzId?;
    @jsondata:Name {value: "country_code"}
    string countryCode?;
    @jsondata:Name {value: "country_name"}
    string countryName?;
    @jsondata:Name {value: "is_eu"}
    string isEu?;
    string region?;
    decimal lat?;
};

public type CurrentAirQuality record {
    decimal no2?;
    decimal o3?;
    @jsondata:Name {value: "us-epa-index"}
    int:Signed32 usEpaIndex?;
    decimal so2?;
    @jsondata:Name {value: "pm2_5"}
    decimal pm25?;
    decimal pm10?;
    decimal co?;
    @jsondata:Name {value: "gb-defra-index"}
    int:Signed32 gbDefraIndex?;
};

public type ForecastDayCondition record {
    int:Signed32 code?;
    string icon?;
    string text?;
};

public type MarineForecastday record {
    string date?;
    ForecastAstro astro?;
    @jsondata:Name {value: "date_epoch"}
    int:Signed32 dateEpoch?;
    MarineHour[] hour?;
    ForecastDay day?;
};

public type InlineResponse200 record {
    Current current?;
    Location location?;
};

# Represents the Queries record for the operation: realtime-weather
public type RealtimeWeatherQueries record {
    # Pass US Zipcode, UK Postcode, Canada Postalcode, IP address, Latitude/Longitude (decimal degree) or city name. Visit [request parameter section](https://www.weatherapi.com/docs/#intro-request) to learn more
    string q;
    # Returns 'condition:text' field in API in the desired language.<br /> Visit [request parameter section](https://www.weatherapi.com/docs/#intro-request) to check 'lang-code'
    string lang?;
};

public type ForecastDay record {
    @jsondata:Name {value: "avgvis_km"}
    decimal avgvisKm?;
    int:Signed32 uv?;
    @jsondata:Name {value: "avgtemp_f"}
    decimal avgtempF?;
    @jsondata:Name {value: "avgtemp_c"}
    decimal avgtempC?;
    @jsondata:Name {value: "daily_chance_of_snow"}
    decimal dailyChanceOfSnow?;
    @jsondata:Name {value: "maxtemp_c"}
    decimal maxtempC?;
    @jsondata:Name {value: "maxtemp_f"}
    decimal maxtempF?;
    @jsondata:Name {value: "mintemp_c"}
    decimal mintempC?;
    @jsondata:Name {value: "avgvis_miles"}
    decimal avgvisMiles?;
    @jsondata:Name {value: "daily_will_it_rain"}
    int:Signed32 dailyWillItRain?;
    @jsondata:Name {value: "mintemp_f"}
    decimal mintempF?;
    @jsondata:Name {value: "totalprecip_in"}
    decimal totalprecipIn?;
    decimal avghumidity?;
    ForecastDayCondition condition?;
    @jsondata:Name {value: "maxwind_kph"}
    decimal maxwindKph?;
    @jsondata:Name {value: "maxwind_mph"}
    decimal maxwindMph?;
    @jsondata:Name {value: "daily_chance_of_rain"}
    decimal dailyChanceOfRain?;
    @jsondata:Name {value: "totalprecip_mm"}
    decimal totalprecipMm?;
    @jsondata:Name {value: "daily_will_it_snow"}
    int:Signed32 dailyWillItSnow?;
};

public type AlertsAlert record {
    string severity?;
    string note?;
    string expires?;
    string certainty?;
    string areas?;
    string effective?;
    string urgency?;
    string instruction?;
    string category?;
    string event?;
    string headline?;
    string msgtype?;
    string desc?;
};

public type CurrentCondition record {
    int:Signed32 code?;
    string icon?;
    string text?;
};

# Represents the Queries record for the operation: astronomy
public type AstronomyQueries record {
    # Date on or after 1st Jan, 2015 in yyyy-MM-dd format
    string dt;
    # Pass US Zipcode, UK Postcode, Canada Postalcode, IP address, Latitude/Longitude (decimal degree) or city name. Visit [request parameter section](https://www.weatherapi.com/docs/#intro-request) to learn more
    string q;
};

# Represents the Queries record for the operation: search-autocomplete-weather
public type SearchAutocompleteWeatherQueries record {
    # Pass US Zipcode, UK Postcode, Canada Postalcode, IP address, Latitude/Longitude (decimal degree) or city name. Visit [request parameter section](https://www.weatherapi.com/docs/#intro-request) to learn more
    string q;
};

public type Marine record {
    MarineForecastday[] forecastday?;
};

# Represents the Queries record for the operation: future-weather
public type FutureWeatherQueries record {
    # Date should be between 14 days and 300 days from today in the future in yyyy-MM-dd format (i.e. dt=2023-01-01)
    string dt?;
    # Pass US Zipcode, UK Postcode, Canada Postalcode, IP address, Latitude/Longitude (decimal degree) or city name. Visit [request parameter section](https://www.weatherapi.com/docs/#intro-request) to learn more
    string q;
    # Returns 'condition:text' field in API in the desired language.<br /> Visit [request parameter section](https://www.weatherapi.com/docs/#intro-request) to check 'lang-code'
    string lang?;
};

public type Search record {
    string country?;
    string name?;
    decimal lon?;
    int:Signed32 id?;
    string region?;
    decimal lat?;
    string url?;
};

public type ForecastHour record {
    @jsondata:Name {value: "feelslike_c"}
    decimal feelslikeC?;
    @jsondata:Name {value: "feelslike_f"}
    decimal feelslikeF?;
    @jsondata:Name {value: "wind_degree"}
    decimal windDegree?;
    @jsondata:Name {value: "windchill_f"}
    decimal windchillF?;
    @jsondata:Name {value: "windchill_c"}
    decimal windchillC?;
    @jsondata:Name {value: "temp_c"}
    decimal tempC?;
    @jsondata:Name {value: "temp_f"}
    decimal tempF?;
    decimal cloud?;
    @jsondata:Name {value: "wind_kph"}
    decimal windKph?;
    @jsondata:Name {value: "wind_mph"}
    decimal windMph?;
    decimal humidity?;
    @jsondata:Name {value: "dewpoint_f"}
    decimal dewpointF?;
    @jsondata:Name {value: "will_it_rain"}
    int:Signed32 willItRain?;
    int:Signed32 uv?;
    @jsondata:Name {value: "heatindex_f"}
    decimal heatindexF?;
    @jsondata:Name {value: "dewpoint_c"}
    decimal dewpointC?;
    @jsondata:Name {value: "is_day"}
    int:Signed32 isDay?;
    @jsondata:Name {value: "precip_in"}
    decimal precipIn?;
    @jsondata:Name {value: "heatindex_c"}
    decimal heatindexC?;
    @jsondata:Name {value: "wind_dir"}
    string windDir?;
    @jsondata:Name {value: "gust_mph"}
    decimal gustMph?;
    @jsondata:Name {value: "pressure_in"}
    decimal pressureIn?;
    @jsondata:Name {value: "chance_of_rain"}
    decimal chanceOfRain?;
    @jsondata:Name {value: "gust_kph"}
    decimal gustKph?;
    @jsondata:Name {value: "precip_mm"}
    decimal precipMm?;
    ForecastCondition condition?;
    @jsondata:Name {value: "will_it_snow"}
    int:Signed32 willItSnow?;
    @jsondata:Name {value: "vis_km"}
    decimal visKm?;
    @jsondata:Name {value: "time_epoch"}
    int:Signed32 timeEpoch?;
    string time?;
    @jsondata:Name {value: "chance_of_snow"}
    decimal chanceOfSnow?;
    @jsondata:Name {value: "pressure_mb"}
    decimal pressureMb?;
    @jsondata:Name {value: "vis_miles"}
    decimal visMiles?;
};

# Represents the Queries record for the operation: history-weather
public type HistoryWeatherQueries record {
    # Date on or after 1st Jan, 2015 in yyyy-MM-dd format
    string dt;
    # Pass US Zipcode, UK Postcode, Canada Postalcode, IP address, Latitude/Longitude (decimal degree) or city name. Visit [request parameter section](https://www.weatherapi.com/docs/#intro-request) to learn more
    string q;
    # Date on or after 1st Jan, 2015 in yyyy-MM-dd format<br />'end_dt' should be greater than 'dt' parameter and difference should not be more than 30 days between the two dates
    @http:Query {name: "end_dt"}
    string endDt?;
    # Must be in 24 hour. For example 5 pm should be hour=17, 6 am as hour=6
    int hour?;
    # Date on or after 1st Jan, 2015 in Unix Timestamp format<br />unixend_dt has same restriction as 'end_dt' parameter. Please either pass 'end_dt' or 'unixend_dt' and not both in same request. e.g. unixend_dt=1490227200
    @http:Query {name: "unixend_dt"}
    int unixendDt?;
    # Returns 'condition:text' field in API in the desired language.<br /> Visit [request parameter section](https://www.weatherapi.com/docs/#intro-request) to check 'lang-code'
    string lang?;
    # Please either pass 'dt' or 'unixdt' and not both in same request.<br />unixdt should be on or after 1st Jan, 2015 in Unix format
    int unixdt?;
};

# Provides a set of configurations for controlling the behaviours when communicating with a remote HTTP endpoint.
@display {label: "Connection Config"}
public type ConnectionConfig record {|
    # The HTTP version understood by the client
    http:HttpVersion httpVersion = http:HTTP_2_0;
    # Configurations related to HTTP/1.x protocol
    http:ClientHttp1Settings http1Settings = {};
    # Configurations related to HTTP/2 protocol
    http:ClientHttp2Settings http2Settings = {};
    # The maximum time to wait (in seconds) for a response before closing the connection
    decimal timeout = 30;
    # The choice of setting `forwarded`/`x-forwarded` header
    string forwarded = "disable";
    # Configurations associated with Redirection
    http:FollowRedirects followRedirects?;
    # Configurations associated with request pooling
    http:PoolConfiguration poolConfig?;
    # HTTP caching related configurations
    http:CacheConfig cache = {};
    # Specifies the way of handling compression (`accept-encoding`) header
    http:Compression compression = http:COMPRESSION_AUTO;
    # Configurations associated with the behaviour of the Circuit Breaker
    http:CircuitBreakerConfig circuitBreaker?;
    # Configurations associated with retrying
    http:RetryConfig retryConfig?;
    # Configurations associated with cookies
    http:CookieConfig cookieConfig?;
    # Configurations associated with inbound response size limits
    http:ResponseLimitConfigs responseLimits = {};
    # SSL/TLS-related options
    http:ClientSecureSocket secureSocket?;
    # Proxy server related options
    http:ProxyConfig proxy?;
    # Provides settings related to client socket configuration
    http:ClientSocketConfig socketConfig = {};
    # Enables the inbound payload validation functionality which provided by the constraint package. Enabled by default
    boolean validation = true;
    # Enables relaxed data binding on the client side. When enabled, `nil` values are treated as optional, 
    # and absent fields are handled as `nilable` types. Enabled by default.
    boolean laxDataBinding = true;
|};

public type AstronomyAstro record {
    string moonset?;
    @jsondata:Name {value: "moon_illumination"}
    string moonIllumination?;
    string sunrise?;
    @jsondata:Name {value: "moon_phase"}
    string moonPhase?;
    string sunset?;
    string moonrise?;
};

# Represents the Queries record for the operation: marine-weather
public type MarineWeatherQueries record {
    # Date should be between today and next 7 day in yyyy-MM-dd format. e.g. '2023-05-20'
    string dt?;
    # Pass Latitude/Longitude (decimal degree) which is on a sea/ocean. Visit [request parameter section](https://www.weatherapi.com/docs/#intro-request) to learn more
    string q;
    # Must be in 24 hour. For example 5 pm should be hour=17, 6 am as hour=6
    int hour?;
    # Number of days of weather forecast. Value ranges from 1 to 7
    1|2|3|4|5|6|7 days;
    # Returns 'condition:text' field in API in the desired language.<br /> Visit [request parameter section](https://www.weatherapi.com/docs/#intro-request) to check 'lang-code'
    string lang?;
    # Please either pass 'dt' or 'unixdt' and not both in same request. unixdt should be between today and next 7 day in Unix format. e.g. 1490227200
    int unixdt?;
};

public type ForecastForecastday record {
    string date?;
    ForecastAstro astro?;
    @jsondata:Name {value: "date_epoch"}
    int:Signed32 dateEpoch?;
    ForecastHour[] hour?;
    ForecastDay day?;
};

# Represents the Queries record for the operation: ip-lookup
public type IpLookupQueries record {
    # Pass IP address
    string q;
};

# Represents the Queries record for the operation: time-zone
public type TimeZoneQueries record {
    # Pass US Zipcode, UK Postcode, Canada Postalcode, IP address, Latitude/Longitude (decimal degree) or city name. Visit [request parameter section](https://www.weatherapi.com/docs/#intro-request) to learn more
    string q;
};

public type Forecast record {
    ForecastForecastday[] forecastday?;
};

public type InlineResponse2001 record {
    Alerts alerts?;
    Current current?;
    Location location?;
    Forecast forecast?;
};

public type ForecastAstro record {
    string moonset?;
    @jsondata:Name {value: "moon_illumination"}
    string moonIllumination?;
    string sunrise?;
    @jsondata:Name {value: "moon_phase"}
    string moonPhase?;
    string sunset?;
    string moonrise?;
};

public type InlineResponse2003 record {
    Location location?;
    Marine forecast?;
};

public type Alerts record {
    AlertsAlert[] alert?;
};

public type InlineResponse2002 record {
    Location location?;
    Forecast forecast?;
};

public type Current record {
    @jsondata:Name {value: "feelslike_c"}
    decimal feelslikeC?;
    int:Signed32 uv?;
    @jsondata:Name {value: "last_updated"}
    string lastUpdated?;
    @jsondata:Name {value: "feelslike_f"}
    decimal feelslikeF?;
    @jsondata:Name {value: "wind_degree"}
    decimal windDegree?;
    @jsondata:Name {value: "last_updated_epoch"}
    int:Signed32 lastUpdatedEpoch?;
    @jsondata:Name {value: "is_day"}
    int:Signed32 isDay?;
    @jsondata:Name {value: "precip_in"}
    decimal precipIn?;
    @jsondata:Name {value: "air_quality"}
    CurrentAirQuality airQuality?;
    @jsondata:Name {value: "wind_dir"}
    string windDir?;
    @jsondata:Name {value: "gust_mph"}
    decimal gustMph?;
    @jsondata:Name {value: "temp_c"}
    decimal tempC?;
    @jsondata:Name {value: "pressure_in"}
    decimal pressureIn?;
    @jsondata:Name {value: "gust_kph"}
    decimal gustKph?;
    @jsondata:Name {value: "temp_f"}
    decimal tempF?;
    @jsondata:Name {value: "precip_mm"}
    decimal precipMm?;
    decimal cloud?;
    @jsondata:Name {value: "wind_kph"}
    decimal windKph?;
    CurrentCondition condition?;
    @jsondata:Name {value: "wind_mph"}
    decimal windMph?;
    @jsondata:Name {value: "vis_km"}
    decimal visKm?;
    decimal humidity?;
    @jsondata:Name {value: "pressure_mb"}
    decimal pressureMb?;
    @jsondata:Name {value: "vis_miles"}
    decimal visMiles?;
};

public type InlineResponse2004 record {
    Location location?;
    Astronomy astronomy?;
};

# Provides API key configurations needed when communicating with a remote HTTP endpoint.
public type ApiKeysConfig record {|
    string 'key;
|};

public type Astronomy record {
    AstronomyAstro astro?;
};

public type Location record {
    string localtime?;
    string country?;
    @jsondata:Name {value: "localtime_epoch"}
    int:Signed32 localtimeEpoch?;
    string name?;
    decimal lon?;
    string region?;
    decimal lat?;
    @jsondata:Name {value: "tz_id"}
    string tzId?;
};
