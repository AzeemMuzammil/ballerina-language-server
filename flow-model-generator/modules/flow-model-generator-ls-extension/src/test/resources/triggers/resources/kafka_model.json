{
  "id": 1,
  "name": "Kafka Service",
  "type": "inbuilt",
  "displayName": "Kafka",
  "documentation": "The Kafka service can be attached to a Kafka listener which listens to Kafka topic(s) and triggers the service when a message is received for Kafka topic(s). The service should implement the `onConsumerRecord` remote method to process the received message(s). Additionally, the service can implement the `onError` remote method to handle errors that occur during the message processing.",
  "moduleName": "kafka",
  "orgName": "ballerinax",
  "packageName": "kafka",
  "version": "4.2.0",
  "listenerProtocol": "kafka",
  "icon": "https://bcentral-packageicons.azureedge.net/images/ballerinax_kafka_4.2.0.png",
  "displayAnnotation": {
    "label": "Kafka",
    "iconPath": "docs/icon.png"
  },
  "listener": {
    "metadata": {
      "label": "Kafka Listener",
      "description": "The Kafka listener listens to Kafka topic(s) and triggers the service when a message is received for Kafka topic(s)."
    },
    "enabled": false,
    "editable": true,
    "value": "",
    "valueType": "OBJECT",
    "valueTypeConstraint": "kafka:Listener",
    "isType": false,
    "placeholder": "",
    "optional": false,
    "advanced": false,
    "properties": {
      "bootstrapServers": {
        "metadata": {
          "label": "bootstrapServers",
          "description": "The Kafka bootstrap server URL. For a clustered use case, provide a comma-separated list of URLs."
        },
        "enabled": true,
        "editable": true,
        "value": "",
        "valueType": "EXPRESSION",
        "valueTypeConstraint": "string|string[]",
        "isType": false,
        "placeholder": "kafka:DEFAULT_URL",
        "optional": false,
        "advanced": false
      },
      "config": {
        "metadata": {
          "label": "config",
          "description": "The Kafka listener configurations."
        },
        "enabled": true,
        "editable": true,
        "value": "",
        "valueType": "EXPRESSION",
        "valueTypeConstraint": "kafka:ConsumerConfiguration",
        "isType": false,
        "placeholder": "",
        "optional": false,
        "advanced": false,
        "properties": {
          "groupId": {
            "metadata": {
              "label": "groupId",
              "description": "Unique string that identifies the consumer"
            },
            "enabled": true,
            "editable": true,
            "value": "order-group-id",
            "valueType": "STRING",
            "valueTypeConstraint": "string",
            "isType": false,
            "placeholder": "",
            "optional": false,
            "advanced": false
          },
          "topics": {
            "metadata": {
              "label": "topics",
              "description": "Topics to be subscribed by the consumer"
            },
            "enabled": true,
            "editable": true,
            "value": "[\"order-topic\"]",
            "valueType": "EXPRESSION",
            "valueTypeConstraint": "string[]",
            "isType": false,
            "placeholder": "",
            "optional": false,
            "advanced": false
          },
          "offsetReset": {
            "metadata": {
              "label": "offsetReset",
              "description": "Offset reset strategy if no initial offset"
            },
            "enabled": false,
            "editable": true,
            "value": "",
            "valueType": "STRING",
            "valueTypeConstraint": "string",
            "isType": false,
            "placeholder": "",
            "optional": true,
            "advanced": false,
            "enum": [
              "kafka:OFFSET_RESET_EARLIEST",
              "kafka:OFFSET_RESET_LATEST",
              "kafka:OFFSET_RESET_NONE"
            ]
          },
          "partitionAssignmentStrategy": {
            "metadata": {
              "label": "partitionAssignmentStrategy",
              "description": "Strategy class for handling the partition assignment among consumers"
            },
            "enabled": false,
            "editable": true,
            "value": "",
            "valueType": "STRING",
            "valueTypeConstraint": "string",
            "isType": false,
            "placeholder": "",
            "optional": true,
            "advanced": false
          },
          "metricsRecordingLevel": {
            "metadata": {
              "label": "metricsRecordingLevel",
              "description": "Metrics recording level"
            },
            "enabled": false,
            "editable": true,
            "value": "",
            "valueType": "STRING",
            "valueTypeConstraint": "string",
            "placeholder": "",
            "optional": true,
            "advanced": false
          },
          "metricsReporterClasses": {
            "metadata": {
              "label": "metricsReporterClasses",
              "description": "Metrics reporter classes"
            },
            "enabled": false,
            "editable": true,
            "value": "",
            "valueType": "STRING",
            "valueTypeConstraint": "string",
            "placeholder": "",
            "optional": true,
            "advanced": false
          },
          "clientId": {
            "metadata": {
              "label": "clientId",
              "description": "Identifier to be used for server side logging"
            },
            "enabled": false,
            "editable": true,
            "value": "",
            "valueType": "STRING",
            "valueTypeConstraint": "string",
            "placeholder": "",
            "optional": true,
            "advanced": false
          },
          "interceptorClasses": {
            "metadata": {
              "label": "interceptorClasses",
              "description": "Interceptor classes to be used before sending the records"
            },
            "enabled": false,
            "editable": true,
            "valueType": "STRING",
            "valueTypeConstraint": "string",
            "value": "",
            "placeholder": "",
            "optional": true,
            "advanced": false
          },
          "isolationLevel": {
            "metadata": {
              "label": "isolationLevel",
              "description": "Transactional message reading method"
            },
            "enabled": false,
            "editable": true,
            "value": "",
            "valueType": "STRING",
            "valueTypeConstraint": "string",
            "placeholder": "",
            "optional": true,
            "advanced": false,
            "enum": [
              "kafka:ISOLATION_COMMITTED",
              "kafka:ISOLATION_UNCOMMITTED"
            ]
          },
          "schemaRegistryUrl": {
            "metadata": {
              "label": "schemaRegistryUrl",
              "description": "Avro schema registry URL. Use this field to specify the schema registry URL, if the Avro serializer is used"
            },
            "enabled": false,
            "editable": true,
            "value": "",
            "valueType": "STRING",
            "valueTypeConstraint": "string",
            "placeholder": "",
            "optional": true,
            "advanced": false
          },
          "additionalProperties": {
            "metadata": {
              "label": "additionalProperties",
              "description": "Additional properties for the property fields not provided by the Ballerina `kafka` module. Use this with caution since this can override any of the fields. It is not recommended to use this field except in an extreme situation"
            },
            "editable": true,
            "value": "",
            "valueType": "EXPRESSION",
            "valueTypeConstraint": "map<string>",
            "placeholder": "",
            "optional": true,
            "advanced": false
          },
          "sessionTimeout": {
            "metadata": {
              "label": "sessionTimeout",
              "description": "Timeout (in seconds) used to detect consumer failures when the heartbeat threshold is reached"
            },
            "enabled": false,
            "editable": true,
            "value": "",
            "valueType": "DECIMAL",
            "valueTypeConstraint": "decimal",
            "placeholder": "",
            "optional": true,
            "advanced": false
          },
          "heartBeatInterval": {
            "metadata": {
              "label": "heartBeatInterval",
              "description": "Expected time (in seconds) between the heartbeats"
            },
            "enabled": false,
            "editable": true,
            "value": "",
            "valueType": "DECIMAL",
            "valueTypeConstraint": "decimal",
            "placeholder": "",
            "optional": true,
            "advanced": false
          },
          "metadataMaxAge": {
            "metadata": {
              "label": "metadataMaxAge",
              "description": "Maximum time (in seconds) to force a refresh of metadata"
            },
            "enabled": false,
            "editable": true,
            "value": "",
            "valueType": "DECIMAL",
            "valueTypeConstraint": "decimal",
            "placeholder": "",
            "optional": true,
            "advanced": false
          },
          "autoCommitInterval": {
            "metadata": {
              "label": "autoCommitInterval",
              "description": "Auto committing interval (in seconds) for commit offset when auto-committing is enabled"
            },
            "enabled": false,
            "editable": true,
            "value": "",
            "valueType": "DECIMAL",
            "valueTypeConstraint": "decimal",
            "placeholder": "",
            "optional": true,
            "advanced": false
          },
          "maxPartitionFetchBytes": {
            "metadata": {
              "label": "maxPartitionFetchBytes",
              "description": "The maximum amount of data the server returns per partition"
            },
            "enabled": false,
            "editable": true,
            "value": "",
            "valueType": "INTEGER",
            "valueTypeConstraint": "int",
            "placeholder": "",
            "optional": true,
            "advanced": false
          },
          "sendBuffer": {
            "metadata": {
              "label": "sendBuffer",
              "description": "Size of the TCP send buffer (SO_SNDBUF)"
            },
            "enabled": false,
            "editable": true,
            "value": "",
            "valueType": "INTEGER",
            "valueTypeConstraint": "int",
            "placeholder": "",
            "optional": true,
            "advanced": false
          },
          "receiveBuffer": {
            "metadata": {
              "label": "receiveBuffer",
              "description": "Size of the TCP receive buffer (SO_RCVBUF)"
            },
            "enabled": false,
            "editable": true,
            "value": "",
            "valueType": "INTEGER",
            "valueTypeConstraint": "int",
            "placeholder": "",
            "optional": true,
            "advanced": false
          },
          "fetchMinBytes": {
            "metadata": {
              "label": "fetchMinBytes",
              "description": "Minimum amount of data the server should return for a fetch request"
            },
            "valueType": "INTEGER",
            "valueTypeConstraint": "int",
            "value": "",
            "placeholder": "",
            "optional": true,
            "editable": true,
            "advanced": false
          },
          "fetchMaxBytes": {
            "metadata": {
              "label": "fetchMaxBytes",
              "description": "Maximum amount of data the server should return for a fetch request"
            },
            "valueType": "int",
            "valueTypeConstraint": "int",
            "value": "",
            "placeholder": "",
            "optional": true,
            "editable": true,
            "advanced": false
          },
          "fetchMaxWaitTime": {
            "metadata": {
              "label": "fetchMaxWaitTime",
              "description": "Maximum amount of time (in seconds) the server will block before answering the fetch request"
            },
            "valueType": "decimal",
            "valueTypeConstraint": "decimal",
            "value": "",
            "placeholder": "",
            "optional": true,
            "editable": true,
            "advanced": false
          },
          "reconnectBackoffTimeMax": {
            "metadata": {
              "label": "reconnectBackoffTimeMax",
              "description": "Maximum amount of time in seconds to wait when reconnecting"
            },
            "valueType": "decimal",
            "valueTypeConstraint": "decimal",
            "value": "",
            "placeholder": "",
            "optional": true,
            "editable": true,
            "advanced": false
          },
          "retryBackoff": {
            "metadata": {
              "label": "retryBackoff",
              "description": "Time (in seconds) to wait before attempting to retry a failed request"
            },
            "valueType": "decimal",
            "valueTypeConstraint": "decimal",
            "value": "",
            "placeholder": "",
            "optional": true,
            "editable": true,
            "advanced": false
          },
          "metricsSampleWindow": {
            "metadata": {
              "label": "metricsSampleWindow",
              "description": "Window of time (in seconds) a metrics sample is computed over"
            },
            "valueType": "decimal",
            "valueTypeConstraint": "decimal",
            "value": "",
            "placeholder": "",
            "optional": true,
            "editable": true,
            "advanced": false
          },
          "metricsNumSamples": {
            "metadata": {
              "label": "metricsNumSamples",
              "description": "Number of samples maintained to compute metrics"
            },
            "valueType": "int",
            "valueTypeConstraint": "int",
            "value": "",
            "placeholder": "",
            "optional": true,
            "editable": true,
            "advanced": false
          },
          "requestTimeout": {
            "metadata": {
              "label": "requestTimeout",
              "description": "Wait time (in seconds) for response of a request"
            },
            "valueType": "decimal",
            "valueTypeConstraint": "decimal",
            "value": "",
            "placeholder": "",
            "optional": true,
            "editable": true,
            "advanced": false
          },
          "connectionMaxIdleTime": {
            "metadata": {
              "label": "connectionMaxIdleTime",
              "description": "Close idle connections after the number of seconds"
            },
            "valueType": "decimal",
            "valueTypeConstraint": "decimal",
            "value": "",
            "placeholder": "",
            "optional": true,
            "editable": true,
            "advanced": false
          },
          "maxPollRecords": {
            "metadata": {
              "label": "maxPollRecords",
              "description": "Maximum number of records returned in a single call to poll"
            },
            "valueType": "int",
            "valueTypeConstraint": "int",
            "value": "",
            "placeholder": "",
            "optional": true,
            "editable": true,
            "advanced": false
          },
          "maxPollInterval": {
            "metadata": {
              "label": "maxPollInterval",
              "description": "Maximum delay between invocations of poll"
            },
            "valueType": "int",
            "valueTypeConstraint": "int",
            "value": "",
            "placeholder": "",
            "optional": true,
            "editable": true,
            "advanced": false
          },
          "reconnectBackoffTime": {
            "metadata": {
              "label": "reconnectBackoffTime",
              "description": "Time (in seconds) to wait before attempting to reconnect"
            },
            "valueType": "decimal",
            "valueTypeConstraint": "decimal",
            "value": "",
            "placeholder": "",
            "optional": true,
            "editable": true,
            "advanced": false
          },
          "pollingTimeout": {
            "metadata": {
              "label": "pollingTimeout",
              "description": "Timeout interval for polling in seconds"
            },
            "valueType": "decimal",
            "valueTypeConstraint": "decimal",
            "value": "",
            "placeholder": "",
            "optional": true,
            "editable": true,
            "advanced": false
          },
          "pollingInterval": {
            "metadata": {
              "label": "pollingInterval",
              "description": "Polling interval for the consumer in seconds"
            },
            "valueType": "decimal",
            "valueTypeConstraint": "decimal",
            "value": "",
            "placeholder": "",
            "optional": true,
            "editable": true,
            "advanced": false
          },
          "concurrentConsumers": {
            "metadata": {
              "label": "concurrentConsumers",
              "description": "Number of concurrent consumers"
            },
            "valueType": "int",
            "valueTypeConstraint": "int",
            "value": "",
            "placeholder": "",
            "optional": true,
            "editable": true,
            "advanced": false
          },
          "defaultApiTimeout": {
            "metadata": {
              "label": "defaultApiTimeout",
              "description": "Default API timeout value (in seconds) for APIs with duration"
            },
            "valueType": "decimal",
            "valueTypeConstraint": "decimal",
            "value": "",
            "placeholder": "",
            "optional": true,
            "editable": true,
            "advanced": false
          },
          "autoCommit": {
            "metadata": {
              "label": "autoCommit",
              "description": "Enables auto committing offsets"
            },
            "valueType": "boolean",
            "valueTypeConstraint": "boolean",
            "value": "",
            "placeholder": "true",
            "optional": true,
            "editable": true,
            "advanced": false
          },
          "checkCRCS": {
            "metadata": {
              "label": "checkCRCS",
              "description": "Checks the CRC32 of the records consumed. This ensures that no on-the-wire or on-disk corruption occurred to the messages. This may add some overhead and might need to be set to `false` if extreme performance is required"
            },
            "valueType": "boolean",
            "valueTypeConstraint": "boolean",
            "value": "",
            "placeholder": "true",
            "optional": true,
            "editable": true,
            "advanced": false
          },
          "excludeInternalTopics": {
            "metadata": {
              "label": "excludeInternalTopics",
              "description": "Whether records from internal topics should be exposed to the consumer"
            },
            "valueType": "boolean",
            "valueTypeConstraint": "boolean",
            "value": "",
            "placeholder": "true",
            "optional": true,
            "editable": true,
            "advanced": false
          },
          "decoupleProcessing": {
            "metadata": {
              "label": "decoupleProcessing",
              "description": "Decouples processing"
            },
            "valueType": "boolean",
            "valueTypeConstraint": "boolean",
            "value": "",
            "placeholder": "true",
            "optional": true,
            "editable": true,
            "advanced": false
          },
          "validation": {
            "metadata": {
              "label": "validation",
              "description": "Configuration related to constraint validation check"
            },
            "valueType": "boolean",
            "valueTypeConstraint": "boolean",
            "value": "",
            "placeholder": "true",
            "optional": true,
            "editable": true,
            "advanced": false
          },
          "autoSeekOnValidationFailure": {
            "metadata": {
              "label": "autoSeekOnValidationFailure",
              "description": "Automatically seeks past the errornous records in the event of an data-binding or validating constraints failure"
            },
            "valueType": "boolean",
            "valueTypeConstraint": "boolean",
            "value": "",
            "placeholder": "true",
            "optional": true,
            "editable": true,
            "advanced": false
          },
          "secureSocket": {
            "metadata": {
              "label": "secureSocket",
              "description": "Configurations related to SSL/TLS encryption"
            },
            "valueType": "EXPRESSION",
            "valueTypeConstraint": "kafka:SecureSocket",
            "value": "",
            "placeholder": "",
            "optional": true,
            "editable": true,
            "advanced": true,
            "fields": {
              "cert": {
                "metadata": {
                  "label": "cert",
                  "description": "Configurations associated with crypto:TrustStore or single certificate file that the client trusts"
                },
                "valueType": "string",
                "valueTypeConstraint": "string",
                "value": "",
                "placeholder": "",
                "optional": true,
                "editable": true,
                "enabled": false,
                "advanced": false
              },
              "key": {
                "metadata": {
                  "label": "key",
                  "description": "Configurations associated with crypto:KeyStore or combination of certificate and private key of the client"
                },
                "valueType": "string",
                "valueTypeConstraint": "string",
                "value": "",
                "placeholder": "",
                "optional": true,
                "editable": true,
                "enabled": false,
                "advanced": false
              },
              "protocol": {
                "metadata": {
                  "label": "protocol",
                  "description": "SSL/TLS protocol related options"
                },
                "valueType": "EXPRESSION",
                "valueTypeConstraint": "record",
                "value": "",
                "placeholder": "",
                "optional": true,
                "editable": true,
                "advanced": true,
                "fields": {
                  "name": {
                    "metadata": {
                      "label": "name",
                      "description": "The name of the protocol"
                    },
                    "valueType": "string",
                    "valueTypeConstraint": "string",
                    "value": "",
                    "placeholder": "",
                    "optional": true,
                    "editable": true,
                    "advanced": false,
                    "enum": [
                      "kafka:SSL",
                      "kafka:TLS",
                      "kafka:DTLS"
                    ]
                  },
                  "versions": {
                    "metadata": {
                      "label": "versions",
                      "description": "The versions of the protocol"
                    },
                    "valueType": "string[]",
                    "valueTypeConstraint": "string[]",
                    "value": "",
                    "placeholder": "",
                    "optional": true,
                    "editable": true,
                    "advanced": false
                  }
                }
              },
              "ciphers": {
                "metadata": {
                  "label": "ciphers",
                  "description": "List of ciphers to be used. By default, all the available cipher suites are supported"
                },
                "valueType": "string[]",
                "valueTypeConstraint": "string[]",
                "value": "",
                "placeholder": "",
                "optional": true,
                "editable": true,
                "enabled": false,
                "advanced": false
              },
              "provider": {
                "metadata": {
                  "label": "provider",
                  "description": "Name of the security provider used for SSL connections. The default value is the default security provider of the JVM"
                },
                "valueType": "string",
                "valueTypeConstraint": "string",
                "value": "",
                "placeholder": "",
                "optional": true,
                "editable": true,
                "enabled": false,
                "advanced": false
              }
            }
          },
          "auth": {
            "metadata": {
              "label": "auth",
              "description": "Authentication-related configurations for the `kafka:Consumer`"
            },
            "valueType": "EXPRESSION",
            "valueTypeConstraint": "kafka:AuthenticationConfiguration",
            "value": "",
            "placeholder": "",
            "optional": true,
            "editable": true,
            "advanced": true,
            "fields": {
              "mechanism": {
                "metadata": {
                  "label": "mechanism",
                  "description": "Type of the authentication mechanism. Currently `SASL_PLAIN`, `SASL_SCRAM_256` & `SASL_SCRAM_512` is supported"
                },
                "valueType": "string",
                "valueTypeConstraint": "string",
                "value": "",
                "placeholder": "kafka:AUTH_SASL_PLAIN",
                "optional": true,
                "editable": true,
                "enabled": false,
                "advanced": false,
                "enum": [
                  "kafka:AUTH_SASL_PLAIN",
                  "kafka:AUTH_SASL_SCRAM_SHA_256",
                  "kafka:AUTH_SASL_SCRAM_SHA_512"
                ]
              },
              "username": {
                "metadata": {
                  "label": "username",
                  "description": "The username to authenticate the Kafka producer/consumer"
                },
                "valueType": "string",
                "valueTypeConstraint": "string",
                "value": "",
                "placeholder": "",
                "optional": true,
                "editable": true,
                "enabled": false,
                "advanced": false
              },
              "password": {
                "metadata": {
                  "label": "password",
                  "description": "The password to authenticate the Kafka producer/consumer"
                },
                "valueType": "string",
                "valueTypeConstraint": "string",
                "value": "",
                "placeholder": "",
                "optional": true,
                "editable": true,
                "enabled": false,
                "advanced": false
              }
            }
          },
          "securityProtocol": {
            "metadata": {
              "label": "securityProtocol",
              "description": "Type of the security protocol to use in the broker connection"
            },
            "valueType": "STRING",
            "valueTypeConstraint": "kafka:SecurityProtocol",
            "value": "",
            "placeholder": "kafka:PROTOCOL_PLAINTEXT",
            "optional": true,
            "editable": true,
            "enabled": false,
            "advanced": false,
            "enum": [
              "kafka:PROTOCOL_PLAINTEXT",
              "kafka:PROTOCOL_SASL_PLAINTEXT",
              "kafka:PROTOCOL_SASL_SSL",
              "kafka:PROTOCOL_SSL"
            ]
          }
        }
      }
    }
  },
  "services": [
    {
      "name": "Kafka",
      "description": "Kafka Service",
      "enabled": true,
      "functions": [
        {
          "metadata": {
            "label": "onConsumerRecord",
            "description": "The `onConsumerRecord` remote method will be triggered when a message is received from Kafka topic(s)."
          },
          "kind": "REMOTE",
          "name": {
            "metadata": {
              "label": "onConsumerRecord",
              "description": "The `onConsumerRecord` remote method will be triggered when a message is received from Kafka topic(s)."
            },
            "enabled": true,
            "editable": false,
            "value": "onConsumerRecord",
            "valueType": "IDENTIFIER",
            "valueTypeConstraint": "string",
            "isType": false,
            "placeholder": "onConsumerRecord",
            "optional": false,
            "advanced": false
          },
          "enabled": true,
          "optional": false,
          "editable": true,
          "parameters": [
            {
              "metadata": {
                "label": "Consumer records",
                "description": "The records received for Kafka topic(s)."
              },
              "kind": "REQUIRED",
              "type": {
                "metadata": {
                  "label": "Consumer records",
                  "description": "The records received for Kafka topic(s)."
                },
                "enabled": true,
                "editable": true,
                "value": "",
                "valueType": "TYPE",
                "valueTypeConstraint": "kafka:AnydataConsumerRecord[]|anydata[]",
                "isType": true,
                "placeholder": "kafka:AnydataConsumerRecord[]",
                "optional": false,
                "advanced": false
              },
              "name": {
                "metadata": {
                  "label": "Consumer records",
                  "description": "The records received for Kafka topic(s)."
                },
                "enabled": true,
                "editable": true,
                "value": "",
                "valueType": "IDENTIFIER",
                "valueTypeConstraint": "string",
                "isType": false,
                "placeholder": "records",
                "optional": false,
                "advanced": false
              },
              "enabled": true,
              "editable": true,
              "optional": false
            },
            {
              "metadata": {
                "label": "Caller",
                "description": "The Kafka caller object to commit the offsets."
              },
              "kind": "REQUIRED",
              "type": {
                "metadata": {
                  "label": "Caller",
                  "description": "The Kafka caller object to commit the offsets."
                },
                "enabled": true,
                "editable": false,
                "value": "kafka:Caller",
                "valueType": "TYPE",
                "valueTypeConstraint": "kafka:Caller",
                "isType": true,
                "placeholder": "kafka:Caller",
                "optional": false,
                "advanced": false
              },
              "name": {
                "metadata": {
                  "label": "Caller",
                  "description": "The Kafka caller object to commit the offsets."
                },
                "enabled": true,
                "editable": true,
                "value": "",
                "valueType": "IDENTIFIER",
                "valueTypeConstraint": "string",
                "isType": false,
                "placeholder": "caller",
                "optional": false,
                "advanced": false
              },
              "enabled": false,
              "editable": true,
              "optional": true
            }
          ],
          "returnType": {
            "metadata": {
              "label": "Return type",
              "description": "Return type of the function. The function can return an error or nil."
            },
            "enabled": "true",
            "editable": true,
            "value": "",
            "valueType": "TYPE",
            "valueTypeConstraint": "error?",
            "isType": true,
            "placeholder": "error?",
            "optional": true,
            "advanced": false
          }
        },
        {
          "metadata": {
            "label": "onError",
            "description": "The `onError` remote method will be triggered when an error occurs during the message processing."
          },
          "kind": "REMOTE",
          "name": {
            "metadata": {
              "label": "onError",
              "description": "The `onError` remote method will be triggered when an error occurs during the message processing."
            },
            "enabled": true,
            "editable": false,
            "value": "onError",
            "valueType": "IDENTIFIER",
            "valueTypeConstraint": "string",
            "isType": false,
            "placeholder": "onError",
            "optional": false,
            "advanced": false
          },
          "enabled": true,
          "optional": true,
          "editable": true,
          "parameters": [
            {
              "metadata": {
                "label": "Kafka Error",
                "description": "The error occurred during the message processing."
              },
              "kind": "REQUIRED",
              "type": {
                "metadata": {
                  "label": "Kafka Error",
                  "description": "The error occurred during the message processing."
                },
                "enabled": true,
                "editable": false,
                "value": "kafka:Error",
                "valueType": "TYPE",
                "valueTypeConstraint": "kafka:Error",
                "isType": true,
                "placeholder": "kafka:Error",
                "optional": false,
                "advanced": false
              },
              "name": {
                "metadata": {
                  "label": "Kafka Error",
                  "description": "The error occurred during the message processing."
                },
                "enabled": true,
                "editable": true,
                "value": "",
                "valueType": "IDENTIFIER",
                "valueTypeConstraint": "string",
                "isType": false,
                "placeholder": "kafkaError",
                "optional": false,
                "advanced": false
              },
              "enabled": true,
              "editable": true,
              "optional": false
            }
          ],
          "returnType": {
            "metadata": {
              "label": "Return type",
              "description": "Return type of the function. The function can return an error or nil."
            },
            "enabled": "true",
            "editable": true,
            "value": "",
            "valueType": "TYPE",
            "valueTypeConstraint": "error?",
            "isType": true,
            "placeholder": "error?",
            "optional": true,
            "advanced": false
          }
        }
      ]
    }
  ]
}
