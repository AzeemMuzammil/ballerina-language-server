/*
 *  Copyright (c) 2022, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *  WSO2 Inc. licenses this file to you under the Apache License,
 *  Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 */

apply from: "$rootDir/gradle/javaProject.gradle"
apply plugin: "com.github.johnrengelman.shadow"
apply plugin: "java"

configurations.all {
    resolutionStrategy.preferProjectModules()
}

configurations {
    balTools
    dist {
        transitive true
    }
}

dependencies {
    implementation project(":langserver-commons")
    
    implementation "org.ballerinalang:ballerina-runtime:${ballerinaLangVersion}"
    implementation "org.ballerinalang:ballerina-lang:${ballerinaLangVersion}"
    implementation "org.ballerinalang:shell-core:${ballerinaLangVersion}"
    implementation "org.ballerinalang:shell-cli:${ballerinaLangVersion}"
    implementation "org.ballerinalang:shell-rt:${ballerinaLangVersion}"

    implementation "org.eclipse.lsp4j:org.eclipse.lsp4j:${eclipseLsp4jVersion}"
    implementation "com.fasterxml.jackson.core:jackson-databind:${jacksonDatabindVersion}"
    testImplementation "org.testng:testng:${testngVersion}"
    testImplementation "com.google.code.gson:gson:${gsonVersion}"
    testImplementation project(":langserver-core")
}

ext.moduleName = 'bal-shell-service'
jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    dependsOn configurations.dist
    from { configurations.dist.collect { it.isDirectory() ? it : zipTree(it) } } {
        exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
    }
    manifest {
        attributes "Main-Class": "io.ballerina.shell.service.BalShellService"
    }
}

rootProject.configureBallerinaDistribution(project)

test {
    useTestNG() {
        suites 'src/test/resources/testng.xml'
    }
}

description = 'LS extension for get results from Bal Shell execution'

compileJava {
    doFirst {
        options.compilerArgs = [
                '--module-path', classpath.asPath,
        ]
        classpath = files()
    }
}

